#!/usr/bin/env node

import app from '../app'
import _debug from 'debug'
import http from 'http'
import settings from '../settings'

const debug = _debug('catfacts-messenger:server')

const normalizePort = val => {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

const port = normalizePort(process.env.PORT || settings.server.port || '3000')
const host = settings.server.host || '0.0.0.0'
const server = http.createServer(app)
server.listen(port, host)
app.set('port', port)

const onError = error => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
}

const onListening = () => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`
  debug(`Listening on ${bind}`)
  console.log(`Listening on ${bind}`)
}

server.on('error', onError)
server.on('listening', onListening)
